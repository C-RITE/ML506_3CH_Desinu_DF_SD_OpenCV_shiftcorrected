// ML506Doc.cpp : implementation of the CML506Doc class
//

#include "stdafx.h"
#include "ML506.h"
#include "Afxmt.h"

#include "ML506Doc.h"
#include "math.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

const BYTE STIMULUS_SIZE_X = 15;
const BYTE STIMULUS_SIZE_Y = 15;

/////////////////////////////////////////////////////////////////////////////
// CML506Doc

CVirtex5BMD       g_objVirtex5BMD;
WDC_DEVICE_HANDLE g_hDevVirtex5;

BOOL              g_bDCFsaved;
BOOL              g_bDCFloaded;
BOOL              g_bGrabStart;
BOOL              g_bFirstVsync;
DWORD             g_dwTotalCount;
DIAG_DMA          g_dma;
VIDEO_INFO        g_VideoInfo;

CString           g_dataReceived;
//CView            *g_viewVideo;
CView            *g_viewMain;

FILE             *g_fp;
LARGE_INTEGER     g_ticksPerSecond;
BOOL              g_bSOF;
POINT             g_stimulus;

HANDLE            g_EventLoadStim;
HANDLE            g_EventLoadLUT;
HANDLE            g_EventEOF;

double            g_CurrentTime;
double            g_PreviousTime;

void CALLBACK TimeoutTimerFunc(UINT wTimerID, UINT msg, DWORD dwUser, DWORD pParam, DWORD dw2)
//void CALLBACK TimeoutTimerFunc(UINT wTimerID, UINT msg, DWORD dwUser, LPVOID pParam, DWORD dw2)
{
	static  UINT32 timeout_cnt;

	if (g_bGrabStart) {
		if (g_objVirtex5BMD.DetectSyncSignals(g_hDevVirtex5) == TRUE) 
			timeout_cnt = 0;
		else 
			timeout_cnt ++;

		if (timeout_cnt >= 3) {
			g_objVirtex5BMD.AppStopADC(g_hDevVirtex5);
			g_objVirtex5BMD.DIAG_DMAClose(g_hDevVirtex5, &g_dma);

			g_bGrabStart = FALSE;

			//g_viewVideo->SendMessage(WM_MESSAGE_SEND, 0, ID_GRAB_STOP);
			//g_viewMain->SendMessage(WM_MESSAGE_SEND, 0, ID_GRAB_STOP);

			AfxMessageBox("Sync signals are lost. Video sampling is stopped.");
		}
	}
} 

// possibly more operations need to be added here
void g_SplitImage(BYTE *imgBuffer, int width, int height) 
{
	int    j, k, idx;

	k = width>>1;
	for (j = 0; j < height; j ++) {
		idx = j*width;
		imgBuffer[idx+k-1] = 0;
	}
}

void g_CalcHistogram(BYTE *imgBuffer, int width, int height, BOOL bDualCh, int *hist) 
{
	int    i, j, midX, imax, sum_val;
	long   sum_sq;
	BYTE   mval;

	ZeroMemory(hist, 258*sizeof(int));

	if (bDualCh) {
		midX = width>>1;
	} else {
		sum_val = 0;
		for (i = 0; i < width*height; i ++) {
			j = imgBuffer[i];
			if (j < 0 || j > 255) j = 0;
			hist[j] ++;
			sum_val += imgBuffer[i];
		}
		// calculate mean
		mval = (BYTE)(sum_val*1.0/(width*height));
		hist[256] = mval;

		imax = 0;
		for (i = 0; i < 256; i ++) {
			imax = hist[i] > imax ? hist[i] : imax;
		}
		sum_sq = 0;
		for (i = 0; i < width*height; i ++) {
			sum_sq += (imgBuffer[i]-mval)*(imgBuffer[i]-mval);
		}
		// calculate standard deviation
		hist[257] = (int)(sqrt(sum_sq*1.0/(width*height-1)));
	}
}


void g_GetAppSystemTime(int *hours, int *minutes, int *seconds, double *milliseconds) {
	int           l_hours;
	int           l_minutes;
	int           l_seconds;
	double        l_milliseconds;
	LARGE_INTEGER l_time;
	LARGE_INTEGER l_tick;

	QueryPerformanceCounter(&l_tick);
	l_time.QuadPart = l_tick.QuadPart/g_ticksPerSecond.QuadPart;
	l_hours = (int)(l_time.QuadPart/3600);
	l_time.QuadPart = l_time.QuadPart - (l_hours * 3600);
	l_minutes = (int)(l_time.QuadPart/60);
	l_seconds = (int)(l_time.QuadPart - (l_minutes * 60));			
	l_milliseconds = (double) (1000.0 * (l_tick.QuadPart % g_ticksPerSecond.QuadPart) / g_ticksPerSecond.QuadPart);

	*hours        = l_hours;
	*minutes      = l_minutes;
	*seconds      = l_seconds;
	*milliseconds = l_milliseconds;
}

void DiagDmaIntHandler(WDC_DEVICE_HANDLE hDev, VIRTEX5_INT_RESULT *pIntResult)
{
}

UINT EOFHandler(LPVOID pParam)
{
	CEvent   WaitEvents;
//	int i, dwTotalCount;
	LARGE_INTEGER l_time;
	LARGE_INTEGER l_tick;

	int       hours;
	int       minutes;
	int       seconds;
	double    milliseconds;
//	PVIRTEX5_DEV_CTX pDevCtx = (PVIRTEX5_DEV_CTX)WDC_GetDevContext(g_hDevVirtex5);

	do {
		::WaitForSingleObject(g_EventEOF, INFINITE);

		g_GetAppSystemTime(&hours, &minutes, &seconds, &milliseconds);
		g_CurrentTime = hours*3600+minutes*60+seconds+milliseconds/1000;
		g_VideoInfo.fFrameInterval = g_CurrentTime - g_PreviousTime;


		g_VideoInfo.frameCounter ++;
		if (g_VideoInfo.bVideoSaving == TRUE) {
			g_VideoInfo.nVideoCounter ++;
//			g_viewVideo->SendMessage(WM_MESSAGE_SEND, g_VideoInfo.nVideoLength, g_VideoInfo.nVideoCounter);
			g_viewMain->SendMessage(WM_MESSAGE_SEND, USER_MESSAGE_SAVEVIDEO, g_VideoInfo.nVideoCounter);
		} else {
//			g_viewVideo->SendMessage(WM_MESSAGE_SEND, 0, 0);
			g_viewMain->SendMessage(WM_MESSAGE_SEND, USER_MESSAGE_NEWFRAME, 0);
			g_VideoInfo.nVideoCounter = 0;
		}

		g_PreviousTime = g_CurrentTime;
	} while (g_bGrabStart);

	return 0;
}


UINT g_GrabVideo(LPVOID pParam)
{
	CEvent    WaitForEvents;
    DWORD     dwStatus, dwOptions;
    UINT32    vsync_bit, ddmacr, u32Pattern = 0xfeedbeef;
    WORD      wSize, wCount;
    BOOL      fIsRead;
    BOOL      fEnable64bit;
    BYTE      bTrafficClass;
	CString   msg;
/*
	int       hours;
	int       minutes;
	int       seconds;
	double    milliseconds;
*/
	g_VideoInfo.nVideoCounter = 0;

    // Get input for user 
    wCount    = g_VideoInfo.tlp_counts;
    fIsRead   = FALSE;
	//dwOptions = DMA_FROM_DEVICE;
	dwOptions = DMA_TO_FROM_DEVICE;
    
	// Get the max payload size from the device 
    wSize     = g_objVirtex5BMD.DMAGetMaxPacketSize(g_hDevVirtex5, fIsRead) / sizeof(UINT32);
    g_dwTotalCount = (DWORD)wCount * (DWORD)wSize;

    // Open DMA handle 
	BZERO(g_dma);
    dwStatus = g_objVirtex5BMD.VIRTEX5_DMAOpen(g_hDevVirtex5, &g_dma.pBuf, dwOptions, g_dwTotalCount*sizeof(UINT32)*3, &g_dma.hDma);

    if (WD_STATUS_SUCCESS != dwStatus)
    {
		msg.Format("Failed to open DMA handle. Error 0x%lx", dwStatus);
        AfxMessageBox(msg);
        return -1;
    }

    fEnable64bit = FALSE;
    bTrafficClass = 0;
    g_objVirtex5BMD.VIRTEX5_DMADevicePrepare(g_dma.hDma, fIsRead, wSize, wCount, u32Pattern, fEnable64bit, bTrafficClass);

    // Enable DMA interrupts (if not polling) 
    g_objVirtex5BMD.VIRTEX5_DmaIntEnable(g_hDevVirtex5, fIsRead);

    if (!g_objVirtex5BMD.VIRTEX5_IntIsEnabled(g_hDevVirtex5))
    {
        dwStatus = g_objVirtex5BMD.VIRTEX5_IntEnable(g_hDevVirtex5, DiagDmaIntHandler);

        if (WD_STATUS_SUCCESS != dwStatus)
        {
            msg.Format("Failed enabling DMA interrupts. Error 0x%lx", dwStatus);
			AfxMessageBox(msg);
            return -1;
        }
    }

	dwStatus = WDC_DMASyncCpu(g_dma.hDma->pDma);

	// Start sampling
	ddmacr = g_objVirtex5BMD.VIRTEX5_ReadReg32(g_dma.hDma->hDev, VIRTEX5_LINECTRL_OFFSET);
	ddmacr |= BIT0;
    g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_LINECTRL_OFFSET, ddmacr);

	g_fp = fopen("data.txt", "w");

	g_VideoInfo.frameCounter = 0;
	do {
		::WaitForSingleObject(WaitForEvents, 10);
	} while (g_bGrabStart);

	// stop sampling
	ddmacr = g_objVirtex5BMD.VIRTEX5_ReadReg32(g_dma.hDma->hDev, VIRTEX5_LINECTRL_OFFSET);
	ddmacr |= BIT0;
	ddmacr -= BIT0;
    g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_LINECTRL_OFFSET, ddmacr);

	g_objVirtex5BMD.DIAG_DMAClose(g_hDevVirtex5, &g_dma);

	fclose(g_fp);

	return 0;
}



DWORD WINAPI CML506Doc::ThreadLoadData2FPGA(LPVOID pParam)
{
	HANDLE fpgaHandles[2];
	unsigned short  *lut_loc_buf1, *lut_loc_buf2, x0;
	int    i, deltax;
	
	fpgaHandles[0] = g_EventLoadStim;
	fpgaHandles[1] = g_EventLoadLUT;

	do {
		// waiting for event 
		switch (::MsgWaitForMultipleObjects(2, fpgaHandles, FALSE, INFINITE, QS_ALLEVENTS)) {
		case WAIT_OBJECT_0:
			g_objVirtex5BMD.AppLoadStimulus(g_hDevVirtex5, g_VideoInfo.stim_buffer, g_VideoInfo.stim_nx, g_VideoInfo.stim_ny, 0);
			g_objVirtex5BMD.AppLoadStimulus(g_hDevVirtex5, g_VideoInfo.stim_buffer, g_VideoInfo.stim_nx, g_VideoInfo.stim_ny, 3);
			break;
		case WAIT_OBJECT_0+1:
			// load lookup table for warping stimulus pattern
			lut_loc_buf1 = new unsigned short [g_VideoInfo.stim_nx];
			lut_loc_buf2 = new unsigned short [g_VideoInfo.stim_nx];
			deltax = g_VideoInfo.stim_nx;

			for (i = 0; i < g_VideoInfo.stim_nx; i ++) {
				lut_loc_buf2[i] = lut_loc_buf1[i] = i;
			}
/*
			FILE *fp;
			fp = fopen("lut.txt", "w");
			for (i = 0; i < g_VideoInfo.stim_nx; i ++) {
				fprintf(fp, "%d, %d, %d, %d\n", lut_loc_buf1[i], lut_loc_buf2[i], g_VideoInfo.weightsRed[i], g_VideoInfo.weightsIR[i]);
			}
			fclose(fp);
*/

			// upload warp LUT for Red stimulus pattern
			g_objVirtex5BMD.AppWriteWarpLUT(g_hDevVirtex5, g_VideoInfo.stim_nx, deltax, lut_loc_buf1, 0);

			// write pixel weights 
			g_objVirtex5BMD.AppWriteWarpWeights(g_hDevVirtex5, deltax, g_VideoInfo.weightsRed, g_VideoInfo.weightsIR);

			delete [] lut_loc_buf1;
			delete [] lut_loc_buf2;

			break;

		default:
			break;
		}
	} while (true);

	CloseHandle(g_EventLoadStim);
	CloseHandle(g_EventLoadLUT);

	return 0;
}



IMPLEMENT_DYNCREATE(CML506Doc, CDocument)

BEGIN_MESSAGE_MAP(CML506Doc, CDocument)
	//{{AFX_MSG_MAP(CML506Doc)
	ON_COMMAND(ID_CAMERA_CONNECT, OnCameraConnect)
	ON_COMMAND(ID_CAMERA_DISCONNECT, OnCameraDisconnect)
	ON_UPDATE_COMMAND_UI(ID_CAMERA_CONNECT, OnUpdateCameraConnect)
	ON_UPDATE_COMMAND_UI(ID_CAMERA_DISCONNECT, OnUpdateCameraDisconnect)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CML506Doc construction/destruction

CML506Doc::CML506Doc()
{
	g_bGrabStart      = FALSE;
	g_bSOF            = FALSE;
	//g_bEOFHandler     = FALSE;
	g_bDCFloaded      = FALSE;
	g_bDCFsaved       = TRUE;
	m_bSymbol         = FALSE;

	g_VideoInfo.fFrameInterval  = 1.0;
	g_VideoInfo.bVideoSaving    = FALSE;
	g_VideoInfo.nVideoLength    = 0;
	g_VideoInfo.nVideoCounter   = 0;
	g_VideoInfo.end_line_ID     = 16;		// update this variable dynamically
	g_VideoInfo.img_width       = 520;//1032;//
	g_VideoInfo.img_height      = 512;
	g_VideoInfo.line_spacing    = 16;
	g_VideoInfo.line_start_addr = 0;
	g_VideoInfo.line_end_addr   = 0;				// update this variable dynamically
	g_VideoInfo.addr_interval   = 1040;//2064;//
	g_VideoInfo.offset_line     = 0x00;//0x17;
	g_VideoInfo.offset_pixel    = 0x1E;//0xb9
	g_VideoInfo.tlp_counts      = 67;//132;//
	g_VideoInfo.stim_nx         = STIMULUS_SIZE_X;
	g_VideoInfo.stim_ny         = STIMULUS_SIZE_Y;
	g_VideoInfo.video_in  = new unsigned char [2048*2048];
	g_VideoInfo.video_out = new unsigned char [2048*2048];
	g_VideoInfo.stim_buffer = new unsigned short [g_VideoInfo.img_width*g_VideoInfo.img_height];
	if (g_VideoInfo.video_in == NULL || g_VideoInfo.video_out == NULL || g_VideoInfo.stim_buffer == NULL) 
		AfxMessageBox("Error! Can't allocate memory space for video.");
	g_VideoInfo.weightsRed      = new UINT32 [1024];
	g_VideoInfo.weightsIR       = new UINT32 [1024];	

	DWORD dwStatus, dwResult;
	dwStatus = WDC_CallKerPlug(g_hDevVirtex5, KP_VRTX5_MSG_DATA, &g_VideoInfo, &dwResult);

	// write a temporary stimulus pattern with 17x17 pixels square
	UINT32 regData1, regData2;
	//regData1 = STIMULUS_SIZE_X;
	regData1 = STIMULUS_SIZE_X/2;
	regData1 = (regData1 << 2) + BIT0 + BIT1;
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_STIMULUS_LOC, regData1);
	regData2 = 0xffffffff;
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_LASER_POWER,  regData2);
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_LASER_POWER2,  regData2);
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_PUPILMASK_OFFSET, 0);
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_TCABOX_OFFSET, 0);

	regData1 = 0;
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_STIM_ADDRESS, regData1);		// bit 15 controls IR stimulus, bit 14 controls stimulus pattern write/read
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_STIM_DATA, 0);
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_STIMULUS_X_BOUND, BIT3+BIT11+BIT19+BIT27);
	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_STIMULUS_X_BOUND2, BIT3+BIT11+BIT19+BIT27);

	// this is default stimulus pattern
	unsigned short *stim_buffer;
	stim_buffer = new unsigned short [g_VideoInfo.stim_nx*g_VideoInfo.stim_ny];
	int i;
	for (i = 0; i < g_VideoInfo.stim_nx*g_VideoInfo.stim_ny; i ++) stim_buffer[i] = 0x3fff;
	g_objVirtex5BMD.AppLoadStimulus(g_hDevVirtex5, stim_buffer, g_VideoInfo.stim_nx, g_VideoInfo.stim_ny, 0);
	g_objVirtex5BMD.AppLoadStimulus(g_hDevVirtex5, stim_buffer, g_VideoInfo.stim_nx, g_VideoInfo.stim_ny, 3);
	delete [] stim_buffer;

	// write default LUT for warping stimulus pattern
	unsigned short *lut_buf;
	lut_buf = new unsigned short [g_VideoInfo.stim_nx];
	for (i = 0; i < g_VideoInfo.stim_nx; i ++) lut_buf[i] = i;
	g_objVirtex5BMD.AppWriteWarpLUT(g_hDevVirtex5, g_VideoInfo.stim_nx, g_VideoInfo.stim_nx, lut_buf, 0);
	delete [] lut_buf;

	g_objVirtex5BMD.AppWriteStimAddrShift(g_hDevVirtex5, 0, g_VideoInfo.img_width, 0, 0, 0, -1, -1);
	g_objVirtex5BMD.AppWriteStimLUT(g_hDevVirtex5, 0, 0, 0, 0, g_VideoInfo.img_width, g_VideoInfo.img_height, 0, 0, 0);


	g_EventLoadStim = CreateEvent(NULL, FALSE, FALSE, "GUI_LOADSTIM_EVENT");
	if (!g_EventLoadStim) {
		AfxMessageBox("Failed to create an event for loading stimulus", MB_ICONEXCLAMATION);
	}
	g_EventLoadLUT = CreateEvent(NULL, FALSE, FALSE, "GUI_LOADLUT_EVENT");
	if (!g_EventLoadLUT) {
		AfxMessageBox("Failed to create an event for loading lookup table for warping stimulus pattern", MB_ICONEXCLAMATION);
	}
	g_EventEOF = CreateEvent(NULL, FALSE, FALSE, "GUI_EOF_EVENT");
	if (!g_EventEOF) {
		AfxMessageBox("Failed to create an event for EOF", MB_ICONEXCLAMATION);
	}


	thd_handle = CreateThread(NULL, 0, ThreadLoadData2FPGA, this, 0, &thdid_handle);
	SetThreadPriority(thd_handle, THREAD_PRIORITY_LOWEST);

	UINT32  power_rd, power_ir, nw1, nw2;
	power_rd = 0xffff;
	power_ir = 0xffff;

	for (i = 0; i < g_VideoInfo.stim_nx; i ++) {
		nw1 = power_rd;// >> 1;
		nw2 = nw1 << 16;
		g_VideoInfo.weightsRed[i] = nw1 | nw2;
		nw1 = power_ir;// >> 1;
		nw2 = nw1 << 16;
		g_VideoInfo.weightsIR[i]  = nw1 | nw2;
	}

	// create a timeout timer for video sampling
    TIMECAPS tc;
    timeGetDevCaps(&tc, sizeof(TIMECAPS));
    m_uResolution = min(max(tc.wPeriodMin, 0), tc.wPeriodMax);
    timeBeginPeriod(m_nTimerRes);

    // create the timer
    m_idTimerEvent = timeSetEvent(500, m_nTimerRes, TimeoutTimerFunc, (DWORD)this, TIME_PERIODIC);
}

CML506Doc::~CML506Doc()
{
	delete [] g_VideoInfo.video_in;
	delete [] g_VideoInfo.video_out;
	delete [] g_VideoInfo.stim_buffer;
	delete [] g_VideoInfo.weightsRed;
	delete [] g_VideoInfo.weightsIR;

	g_objVirtex5BMD.VIRTEX5_WriteReg32(g_hDevVirtex5, VIRTEX5_STIMULUS_LOC, 0);

    timeKillEvent(m_idTimerEvent);
    // reset the timer
    timeEndPeriod (m_uResolution);

	//AfxMessageBox("Exit: CML506Doc::~CML506Doc()");
}

BOOL CML506Doc::OnNewDocument()
{
	if (!CDocument::OnNewDocument())
		return FALSE;

	// TODO: add reinitialization code here
	// (SDI documents will reuse this document)

	return TRUE;
}



/////////////////////////////////////////////////////////////////////////////
// CML506Doc serialization

void CML506Doc::Serialize(CArchive& ar)
{
	if (ar.IsStoring())
	{
		// TODO: add storing code here
	}
	else
	{
		// TODO: add loading code here
	}
}

/////////////////////////////////////////////////////////////////////////////
// CML506Doc diagnostics

#ifdef _DEBUG
void CML506Doc::AssertValid() const
{
	CDocument::AssertValid();
}

void CML506Doc::Dump(CDumpContext& dc) const
{
	CDocument::Dump(dc);
}
#endif //_DEBUG

/////////////////////////////////////////////////////////////////////////////
// CML506Doc commands

void CML506Doc::OnCameraConnect() 
{
	// CHECK if there is valid h-sync and v-sync.
	if (g_objVirtex5BMD.DetectSyncSignals(g_hDevVirtex5) == FALSE) {
		AfxMessageBox("No sync signals found, sampling aborted.", MB_ICONEXCLAMATION);
		return;
	}

	// TODO: Add your command handler code here
	g_bGrabStart = TRUE;
	QueryPerformanceFrequency(&g_ticksPerSecond);

	AfxBeginThread(g_GrabVideo, THREAD_PRIORITY_NORMAL);
	AfxBeginThread(EOFHandler, THREAD_PRIORITY_NORMAL);
	UpdateAllViews(NULL, USER_MESSAGE_CONNECT, NULL);
}

void CML506Doc::OnCameraDisconnect() 
{
	// TODO: Add your command handler code here
	g_bGrabStart = FALSE;
	UpdateAllViews(NULL, USER_MESSAGE_DISCONNECT, NULL);
}

void CML506Doc::OnUpdateCameraConnect(CCmdUI* pCmdUI) 
{	
	pCmdUI->Enable(!g_bGrabStart && g_bDCFloaded);
}

void CML506Doc::OnUpdateCameraDisconnect(CCmdUI* pCmdUI) 
{
	pCmdUI->Enable(g_bGrabStart && g_bDCFloaded);
}



BOOL CML506Doc::Load8BITbmp(CString filename, BYTE *stim_buffer, int *width, int *height)
{
	BYTE     *buffer;
	CBitmap   bmp;
	BITMAP    bitmap;
	int       retVal, n, i, k;

	// read stimulus pattern from a bitmap file
	HBITMAP hBmp = (HBITMAP)::LoadImage(NULL, filename, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE);
	if (hBmp == NULL) {
		AfxMessageBox(_T("Open file <") + filename + _T("> error"), MB_ICONEXCLAMATION);
		return FALSE;
	}

	CBitmap *pBmp = bmp.FromHandle(hBmp);
	pBmp->GetBitmap(&bitmap);
	
	if (bitmap.bmHeight>361 || bitmap.bmWidth>361) {
		AfxMessageBox("Stimulus Pattern is too big. Set width<361 and height<361", MB_ICONEXCLAMATION);
		return FALSE;
	}

	buffer = new BYTE [bitmap.bmWidthBytes*bitmap.bmHeight];
	
	retVal = pBmp->GetBitmapBits(bitmap.bmWidthBytes*bitmap.bmHeight, buffer);

	n = bitmap.bmWidthBytes/bitmap.bmWidth;

	for (i = 0; i < bitmap.bmWidth*bitmap.bmHeight; i ++) {
		k = (buffer[n*i]+buffer[n*i+1]+buffer[n*i+2])/3;
		stim_buffer[i] = (BYTE)k;
	}

	*width  = bitmap.bmWidth;
	*height = bitmap.bmHeight;

	delete [] buffer;

	return TRUE;
}

void CML506Doc::LoadSymbol(CString filename)
{
	int       retVal, i, k, n, m, sizeX, sizeY, width, height, x1, x2;
	BYTE     *stim_buffer;

	stim_buffer = new BYTE [512*512];
	if (Load8BITbmp(filename, stim_buffer, &width, &height) == FALSE) {
		delete [] stim_buffer;
		return;
	}

	if (width % 2 == 0) sizeX = width;
	else sizeX = width + 1;
	sizeY = height;


	g_VideoInfo.stim_nx = sizeX;
	g_VideoInfo.stim_ny = sizeY;

	ZeroMemory(g_VideoInfo.stim_buffer, sizeX*sizeY*sizeof(unsigned short));
	for (k = 0; k < height; k ++) {
		n = k * sizeX;
		m = k * width;
		for (i = 0; i < width; i ++) {
			g_VideoInfo.stim_buffer[n+i] = (stim_buffer[m+i]<<6);
		}
	}

	delete [] stim_buffer;

	// upload stimulus pattern to FPGA, and saves it in a block RAM
	SetEvent(g_EventLoadStim);
	SetEvent(g_EventLoadLUT);

	m_bSymbol = true;

	UINT32  power_rd, power_ir, nw1, nw2;
	power_rd = 0xffff;
	power_ir = 0xffff;

	for (i = 0; i < g_VideoInfo.stim_nx; i ++) {
		nw1 = power_rd;// >> 1;
		nw2 = nw1 << 16;
		g_VideoInfo.weightsRed[i] = nw1 | nw2;
		nw1 = power_ir;// >> 1;
		nw2 = nw1 << 16;
		g_VideoInfo.weightsIR[i]  = nw1 | nw2;
	}
}

